#include <stdlib.h>
#include "myfft_fft.c"
#include "myfft.h"

#define PI 3.14159265358979323846
#define DSP_ADD_LENGTH 4
#define VECTOR_SIZE 1024

t_int *fft_perform(t_int *w){
  
  t_fft *x = (t_fft *)(w[1]);
  t_sample *in = (t_sample *)(w[2]);
  t_sample *out = (t_sample *)(w[3]);
  int n = (int)(w[4]), i;
  
  for(i=0;i<n;i++) {
    *in = *in + 1;
    out[i] = x->window[i] * *in ;
  }
  
  rdft(VECTOR_SIZE, 1, out, x->bitshuffle, x->weighting);
  return (w+DSP_ADD_LENGTH+1);
  
}


void fft_dsp(t_fft *x, t_signal **sp){
  dsp_add(fft_perform, DSP_ADD_LENGTH, x,
    sp[0]->s_vec, sp[1]->s_vec, sp[0]->s_n);
}


void fft_free(t_fft *x){
  
  free(x->window);
  free(x->bitshuffle);
  free(x->weighting);
  outlet_free(x->x_out);
}


void *fft_new(void)
{
  t_fft *m;
  m = (t_fft *)pd_new(fft_class);
  m->x_out = outlet_new(&m->x_obj, &s_signal);
  
  m->window = malloc(VECTOR_SIZE * (sizeof * m->window));
  m->bitshuffle = malloc(2*VECTOR_SIZE * (sizeof * m->bitshuffle));
  m->weighting = malloc(2*VECTOR_SIZE * (sizeof * m->weighting));
  
  int i;
  for (i=0;i<VECTOR_SIZE;i++) {
    m->window[i] = (float) (0.42-0.5*(cos (2*PI * i/VECTOR_SIZE) )+0.08*(cos (4*PI*i/VECTOR_SIZE)) );
  }  
  init_rdft(VECTOR_SIZE, m->bitshuffle, m->weighting);
  
  return (void *)m;
}


void fft_setup(void){

  fft_class = class_new(gensym("myfft~"),
				(t_newmethod)fft_new,
				(t_method) fft_free,
				sizeof(t_fft),
				CLASS_DEFAULT,
				0);
  
  class_addmethod(fft_class,
		  (t_method)fft_dsp,
		  gensym("dsp"),
		  0);
  
  CLASS_MAINSIGNALIN(fft_class,
		     t_fft,
		     f);
}
